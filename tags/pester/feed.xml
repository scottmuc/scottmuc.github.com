<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pester on More Muc Than You Can Handle</title>
    <link>https://scottmuc.com/tags/pester/</link>
    <description>Recent content in Pester on More Muc Than You Can Handle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>scottmuc@gmail.com (Scott Muc)</managingEditor>
    <webMaster>scottmuc@gmail.com (Scott Muc)</webMaster>
    <copyright>Copyright Â© 2024 - Scott Muc</copyright>
    <lastBuildDate>Thu, 07 Aug 2014 17:50:58 +0200</lastBuildDate>
    <atom:link href="https://scottmuc.com/tags/pester/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Growing an Open Source Project: The Pester Story</title>
      <link>https://scottmuc.com/blog/growing-an-open-source-project-the-pester-story/</link>
      <pubDate>Thu, 07 Aug 2014 17:50:58 +0200</pubDate><author>scottmuc@gmail.com (Scott Muc)</author>
      <guid>https://scottmuc.com/blog/growing-an-open-source-project-the-pester-story/</guid>
      <description>In the Beginning In 2010 I was on a project that focused on build and release software for a bunch of .Net projects (and a few Java projects). Our &amp;ldquo;glue&amp;rdquo; was written in PowerShell because of the wonderful remoting capabilities and it&amp;rsquo;s integration with Windows automation. Our code was untested and our code base was growing over time because our tools proved to be useful and we were getting more and more feedback.</description>
    </item>
    <item>
      <title>Testing Powershell Code That Talks to CLR Objects</title>
      <link>https://scottmuc.com/blog/testing-powershell-code-that-talks-to-clr-objects/</link>
      <pubDate>Thu, 05 Jun 2014 17:39:41 -0700</pubDate><author>scottmuc@gmail.com (Scott Muc)</author>
      <guid>https://scottmuc.com/blog/testing-powershell-code-that-talks-to-clr-objects/</guid>
      <description>Several months ago someone posted an excellent question on the Pester Group about a certain problem area in testing PowerShell with Pester. He brings up a relevant example of the difficulties that can occur when writing tests is done afterwards. It also reveals a missing feature of Pester.&#xA;First let me display the code that needed tests:&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Add-Type -Path (Join-Path -Path $psScriptRoot &amp;#34;Renci.</description>
    </item>
    <item>
      <title>PowerShell Pester 2 and 1.2 Released!</title>
      <link>https://scottmuc.com/blog/powershell-pester-2-and-1-dot-2-released/</link>
      <pubDate>Sat, 02 Feb 2013 15:34:00 +0000</pubDate><author>scottmuc@gmail.com (Scott Muc)</author>
      <guid>https://scottmuc.com/blog/powershell-pester-2-and-1-dot-2-released/</guid>
      <description>After a whirlwind of activity on the Pester codebase I&amp;rsquo;m happy to announce the latest release of Pester. Versions 1.2 and 2 are identical feature wise except for one subtle difference that I&amp;rsquo;ll get into soon.&#xA;New Expectation and Matcher Syntax In prior versions of Pester, we have the dot notation expectation and matcher syntax&#xA;$some_string.should.be(&amp;#34;some value&amp;#34;) This required some clever and downright nasty hacks to the PowerShell runtime. This created a few issues for some users and I wanted to get that fixed.</description>
    </item>
    <item>
      <title>PowerShell BDD Testing - Pester Screencast</title>
      <link>https://scottmuc.com/blog/powershell-bdd-testing-pester-screencast/</link>
      <pubDate>Thu, 25 Aug 2011 11:16:00 +0000</pubDate><author>scottmuc@gmail.com (Scott Muc)</author>
      <guid>https://scottmuc.com/blog/powershell-bdd-testing-pester-screencast/</guid>
      <description>A few months ago I posted a simple tutorial on how to use Pester (a powershell bdd testing framework). I&amp;rsquo;m starting to practice the making of screencasts so I thought I would add some audio/visual to the blog post. I start rambling in the last 5 minutes so I won&amp;rsquo;t feel insulted if you stop paying attention after that part.&#xA;Also, I want to thank Manoj Mahalingam and Martin Aatmaa for their feedback and contributions!</description>
    </item>
    <item>
      <title>Pester - PowerShell BDD Style Testing For The System Administrator</title>
      <link>https://scottmuc.com/blog/pester-powershell-bdd-style-testing-for-the-system-administrator/</link>
      <pubDate>Wed, 11 May 2011 20:05:00 +0000</pubDate><author>scottmuc@gmail.com (Scott Muc)</author>
      <guid>https://scottmuc.com/blog/pester-powershell-bdd-style-testing-for-the-system-administrator/</guid>
      <description>Hi there and welcome to my demo of Pester, a BDD style testing framework for Powershell. The creation of Pester came out of the desire to test some build/deployment infrastructure we were creating for a project. We wrote nearly all the code without tests and it came to bite us in the end. I wanted to find a way ensure these problems didn&amp;rsquo;t happen again as well as provide some code coverage to give new entrants to the codebase some confidence that they won&amp;rsquo;t break everything.</description>
    </item>
  </channel>
</rss>
